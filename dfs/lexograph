package dfs

import (
	"fmt"
)

//https://leetcode.com/problems/lexicographically-smallest-equivalent-string/description/

func smallestEquivalentString(s1 string, s2 string, baseStr string) string {
	graph := make(map[byte][]byte)
	for i := 0; i < len(s1); i++ {
		graph[s1[i]] = append(graph[s1[i]], s2[i])
		graph[s2[i]] = append(graph[s2[1]], s1[i])
	}

	visited := make(map[byte]bool)
	minChar := make(map[byte]byte)

	var dfs1 func(node byte) byte
	dfs1 = func(node byte) byte {
		if _, ok := visited(node); ok {
			return minChar[node]
		}
		visited[node] = true
		min := node
		for _, neighbor := range graph[node] {
			c := dfs(neighbor)
			if c < min {
				min = c
			}
		}
		minChar[node] = min
		return min
	}
	for i := range baseStr {
		result[i] = dfs1(baseStr[i])
	}
	return string(result)
}

func PlaySmallestEquivalentString() {
	fmt.Println(smallestEquivalentString("abc", "cde", "eed"))
}
